/*
 * Anika Cho
 * Dorgan Lab, Summer 2022
 * Bubble Injection Procedure Code
 * Updated August 2022
 * 
 * Setup: 
 * Mud sample should be extruded into a pre-drilled test core with all bubble injection holes thoroughly taped closed
 * Check connections: USB power from computer to Arduino Zero, standard wall outlet to power supply/electronics box, stepper motor cable to "Z axis" port, pressure sensor & Z-limit switch to labelled USB ports
 * Place the test core in the tray and slide into the circular slot on the test platform
 * Upload this Bubble Injection program to the Arduino Zero
 * 
 * Bubble Injection Testing Procedure:
 * 1) Reset the syringe by entering the command "r" to the serial monitor/plotter
 * 2) Check the needle for clogs by flushing the needle with warm water and air using a hand-held syringe
 *    Use 14G non-coring needle for mud, 22G non-coring needle for jello
 * 3) Firmly screw the needle into the stop valve with the needle port oriented sideways, then use the micromanipulator to align the needle with an injection hole
 * 4) Use the micromanipulator to fully insert the needle into the sediment core through the tape
 * 4) Verify that the SD Card is in the SD Card Shield and hit the Reset button on the Arduino Zero to begin logging pressure data to a new file
 * 5) Input the chosen procedure command to the serial monitor/plotter to begin the air injection cycle
 *    ("j" for jello, "m" for mud)
 * 6) Monitor the live pressure plot generated by the serial plotter until a clear pressure drop is observed (bubble formation)
 *    Orange line = Pressure (PSI), Grey line = Analog Voltage Input
 * 7) Hit the Reset button on the TinyG board to stop air injection after bubble formation
 * 8) Remove the SD card to stop logging pressure data and save the file
 * 9) Fully retract the needle from the core and tape over the puncture hole to prevent water leakage
 */

//*********************************** INITIAL SETUP ***********************************************

#include <Wire.h>
#include <Adafruit_ADS1X15.h>
#include <SPI.h>
#include <SD.h>

// Number of milliseconds between grabbing and logging data. 1000 ms = once a second
#define LOG_INTERVAL  10    // ms between entries (reduce to take more/faster data)

// Number of milliseconds before writing the logged data permanently to disk
// Set to the LOG_INTERVAL to write each time (safest)
// Set to 10*LOG_INTERVAL to write all data every 10 datareads
// Could lose the last 10 datareads if power is lost, but consumes less power & is much faster!
#define SYNC_INTERVAL 100 // mills between calls to flush() - to write data to the card

uint32_t syncTime = 0;      // time of last sync()

#define ECHO_TO_SERIAL   1  // echo data to serial port
#define WAIT_TO_START    0  // Wait for serial input in setup()

// For the data logging shield, we use digital pin 10 for the SD cs line
const int chipSelect = 10;  //THIS NEEDS TO BE JUMPED FROM THE NORMAL PIN 10 ON THE SD CARD SHIELD

// Data logging file
File logfile;


//*********************************** TEST ARDUINO COMMS ***********************************************

int val = 0;
void error(char *str)
{
  SerialUSB.print("error: ");
  SerialUSB.println(str);
  while (1);
}

//*********************************** CAPTURE SERIAL DATA FROM TINYG ***********************************************

const byte numChars = 43;
char receivedChars[numChars];
char tempChars[numChars];        // temporary array for use when parsing

// variables to hold the parsed data
char messageFromPC[numChars] = {0};
int integerFromPC = 0;
float floatFromPC = 0.0;
float Zpos = 0.000;
float Apos = 0.000;
boolean newData = false;

//*********************************** PRESSURE SENSOR SETUP ***********************************************

const int pressureSensorIn = A1;  // analog input pin that the pressure sensor is attached to
int sensorValue = 0;              // value read from the pressure sensor
float PSI = 0;                    // value output to the PWM (analog out)
float sensorVolt = 0;             // voltage from the pressure sensor
  
Adafruit_ADS1015 ads;     /* Use this for the 12-bit version */


//*********************************** BUTTONS ***********************************************

const int buttonD8 = 8 ; // button with pin
int buttonStateD8 = 0 ;

const int buttonD5 = 5 ; // button with pin
int buttonStateD5 = 0 ;

const int buttonD6 = 6 ; // button with pin
int buttonStateD6 = 0 ;

const int buttonD7 = 7 ; // button with pin
int buttonStateD7 = 0 ;


//*********************************** SETUP SERIAL COMMS & SD CARD LOG FILE ***********************************************

void setup()
{
  SerialUSB.begin (115200);
  Serial1.begin (115200);
  Serial.begin (115200);

  pinMode(buttonD8, INPUT);
  pinMode(buttonD5, INPUT);
  pinMode(buttonD6, INPUT);
  pinMode(buttonD7, INPUT);

  delay (500); // setting TinyG position output

  Serial1.println("?");
  Serial1.println("{\"sr\":{\"posx\":t, \"posy\":t,\"posz\":t,\"posa\":t}}");
  Serial1.println("$qv=0");  // setting the Queue Report Verbosity to zero (disable) to prevent qr:xx from appearing in the serial feed
  Serial1.println("$sv=2");  // setting the status report to "verbose" so all positions show all the time


  Serial1.println("?");

  // Initialize the SD card
  SerialUSB.print("Initializing SD card...");
  pinMode(10, OUTPUT); 

  // Verify that the card is present and can be initialized
  if (!SD.begin(chipSelect)) {
    error("Card failed, or not present");
  }
  Serial.println("card initialized.");

  // Create a new file
  char filename[] = "BUBBLE00.CSV";
  for (uint8_t i = 0; i < 100; i++) {
    filename[6] = i / 10 + '0';
    filename[7] = i % 10 + '0';
    if (! SD.exists(filename)){   // only open a new file if it doesn't exist
      logfile = SD.open(filename, FILE_WRITE);
      break;
    }
  }

  if (!logfile) {
    error("couldnt create file");
  }

  SerialUSB.print("Logging to: ");
  SerialUSB.println(filename);
  
  logfile.println("Millis,Pressure,RawPressure,Z");  // CHANGE THESE HEADERS TO WHATEVER YOU WANT
  delay (50);
}


//*********************************** MAIN LOOP ***********************************************

void loop () {
  
  analogReadResolution(12);                     // changing the resolution (from 8bit to 12bit) of the analong read

  sensorValue = analogRead(pressureSensorIn);   // collect data from pressure sensor analog input A1
  sensorVolt = sensorValue * (3.3/4095.0);      // map sensor value to the range of analog out: 3.3V input voltage max / 2^12 bit resolution

  PSI = (sensorVolt * 3.6138) - 3.8668;         // calibrated conversion equation for half range Omega 15PSI, 4-20mA (CHANGE BASED ON SENSOR CALIBRATION)
  
  uint32_t m = millis();

  while (Serial1.available() > 0) {
    recvWithStartEndMarkers();
    if (newData == true) {
      strcpy(tempChars, receivedChars);
      // this temporary copy is necessary to protect the original data
      // because strtok() used in parseData() replaces the commas with \0
      parseData();
      // showParsedData();
      newData = false;
    }
  }

  // read from port 0, send to port 1:
  while (SerialUSB.available() > 0) {
    char inByte = SerialUSB.read();


//*********************************** BUBBLE INJECTION PROCEDURE CASES ***********************************************

  //Type case letter in serial monitor input to initiate procedure
  
    switch (inByte) {

      case 'r': // RESET SYRINGE PUMP, ZERO THE Z-AXIS
        Serial1.print("g28.2 z0"); // gcode command
        Serial1.print('\r');
        ;
        break;  // end reset procedure
        
      case 'j': // JELLO PROCEDURE
      // Inject 0.05 mL at a time, speed f1, wait 5 seconds between runs
        Serial1.print("g1z0.05f1"); //Inject 0.05mL initially
        Serial1.print('\r');
        Serial1.print("g4p5"); // pause 5 seconds
        Serial1.print('\r');
        Serial1.print("g91"); //Enter incremental motion mode
        Serial1.print('\r');

        for (int i = 1; i < 90; i++) {
          Serial1.print("g1z0.05"); // increment z axis position up by 0.05mL
          Serial1.print('\r');
          Serial1.print("g4p5"); // pause 5 seconds
          Serial1.print('\r');
        }
        break; // end jello procedure


      case 'm': // MUD PROCEDURE
        // Inject 0.1 mL at a time, speed f2, wait 5 seconds between runs
        Serial1.print("g1z0.1f2"); //Inject 0.1mL initially
        Serial1.print('\r');
        Serial1.print("g4p5"); // pause 5 seconds
        Serial1.print('\r');
        Serial1.print("g91"); //Enter incremental motion mode
        Serial1.print('\r');

        for (int i = 1; i < 30; i++) {
          Serial1.print("g1z0.1"); // increment z axis position up by 0.1mL
          Serial1.print('\r');
          Serial1.print("g4p5"); // pause 5 seconds
          Serial1.print('\r');
        }
        break; // end mud procedure

    }
    Serial1.write(inByte);
  }


//*********************************** PRINT/VIEW SERIAL DATA ***********************************************

// Print data to SD Card
  logfile.print(m); //milliseconds since start
  logfile.print(",");
  logfile.print(PSI, 4);  //print PSI to 4 decimal places; column2
  logfile.print(",");
  logfile.print(sensorValue); //column3
  logfile.print(",");
  logfile.print(Zpos, 4); // column4
  logfile.println(",");

// Print data to Serial Monitor/Plotter
// Note: Some values omitted to simplify live plot display (UNCOMMENT TO DISPLAY MORE SERIAL DATA)
if (m % 100 == 0){
  #if ECHO_TO_SERIAL
    SerialUSB.print("Min:-0.5, Max:3.3");
    SerialUSB.print(",   ");
    //SerialUSB.print(m);         // milliseconds since start
    //SerialUSB.print(",   ");
    SerialUSB.print("PSI: ");
    SerialUSB.print (PSI, 4);     // print PSI to 4 decimal places
    SerialUSB.print(",   ");
    //SerialUSB.print(sensorValue);
    //SerialUSB.print(",   ");
    SerialUSB.print("sensorVolt: ");
    SerialUSB.print(sensorVolt);
    //SerialUSB.print(",   ");
    //SerialUSB.print(Zpos, 4);
    SerialUSB.println(",");
  #endif
}

  if ((millis() - syncTime) < SYNC_INTERVAL) return;
  syncTime = millis();
  logfile.flush();

}

//*********************************** END MAIN LOOP ***********************************************


void recvWithStartEndMarkers() {
  static boolean recvInProgress = false;
  static byte ndx = 0;
  char startMarker = ':';
  char endMarker = '\n';
  char rc;

  rc = Serial1.read();

  if (recvInProgress == true) {
    if (rc != endMarker) {
      receivedChars[ndx] = rc;
      ndx++;
      if (ndx >= numChars) {
        ndx = numChars - 1;
      }
    }
    else {
      receivedChars[ndx] = '\0'; // terminate the string
      recvInProgress = false;
      ndx = 0;
      newData = true;
    }
  }

  else if (rc == startMarker) {
    recvInProgress = true;
  }
}

void parseData() {      // split the data into its parts
  char * strtokIndx; // this is used by strtok() as an index
  strtokIndx = strtok(NULL, ":");
  Zpos = atof(strtokIndx);     // convert this part to a float
  strtokIndx = strtok(NULL, ":");
  Apos = atof(strtokIndx);     // convert this part to a float
}
